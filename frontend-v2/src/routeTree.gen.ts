/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthCallbackRouteImport } from './routes/auth.callback'
import { Route as authSignupRouteImport } from './routes/(auth)/signup'
import { Route as authLoginRouteImport } from './routes/(auth)/login'
import { Route as appProblemsIndexRouteImport } from './routes/(app)/problems/index'
import { Route as appProblemsProblemSlugRouteImport } from './routes/(app)/problems/$problemSlug'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthCallbackRoute = AuthCallbackRouteImport.update({
  id: '/auth/callback',
  path: '/auth/callback',
  getParentRoute: () => rootRouteImport,
} as any)
const authSignupRoute = authSignupRouteImport.update({
  id: '/(auth)/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const authLoginRoute = authLoginRouteImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const appProblemsIndexRoute = appProblemsIndexRouteImport.update({
  id: '/(app)/problems/',
  path: '/problems/',
  getParentRoute: () => rootRouteImport,
} as any)
const appProblemsProblemSlugRoute = appProblemsProblemSlugRouteImport.update({
  id: '/(app)/problems/$problemSlug',
  path: '/problems/$problemSlug',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof authLoginRoute
  '/signup': typeof authSignupRoute
  '/auth/callback': typeof AuthCallbackRoute
  '/problems/$problemSlug': typeof appProblemsProblemSlugRoute
  '/problems': typeof appProblemsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof authLoginRoute
  '/signup': typeof authSignupRoute
  '/auth/callback': typeof AuthCallbackRoute
  '/problems/$problemSlug': typeof appProblemsProblemSlugRoute
  '/problems': typeof appProblemsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/signup': typeof authSignupRoute
  '/auth/callback': typeof AuthCallbackRoute
  '/(app)/problems/$problemSlug': typeof appProblemsProblemSlugRoute
  '/(app)/problems/': typeof appProblemsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/signup'
    | '/auth/callback'
    | '/problems/$problemSlug'
    | '/problems'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/signup'
    | '/auth/callback'
    | '/problems/$problemSlug'
    | '/problems'
  id:
    | '__root__'
    | '/'
    | '/(auth)/login'
    | '/(auth)/signup'
    | '/auth/callback'
    | '/(app)/problems/$problemSlug'
    | '/(app)/problems/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  authLoginRoute: typeof authLoginRoute
  authSignupRoute: typeof authSignupRoute
  AuthCallbackRoute: typeof AuthCallbackRoute
  appProblemsProblemSlugRoute: typeof appProblemsProblemSlugRoute
  appProblemsIndexRoute: typeof appProblemsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/callback': {
      id: '/auth/callback'
      path: '/auth/callback'
      fullPath: '/auth/callback'
      preLoaderRoute: typeof AuthCallbackRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/signup': {
      id: '/(auth)/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof authSignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)/problems/': {
      id: '/(app)/problems/'
      path: '/problems'
      fullPath: '/problems'
      preLoaderRoute: typeof appProblemsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)/problems/$problemSlug': {
      id: '/(app)/problems/$problemSlug'
      path: '/problems/$problemSlug'
      fullPath: '/problems/$problemSlug'
      preLoaderRoute: typeof appProblemsProblemSlugRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  authLoginRoute: authLoginRoute,
  authSignupRoute: authSignupRoute,
  AuthCallbackRoute: AuthCallbackRoute,
  appProblemsProblemSlugRoute: appProblemsProblemSlugRoute,
  appProblemsIndexRoute: appProblemsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
